#pragma once

/*
今回やるDirectXを使用したプログラミングは「プログラマブル・シェーダ」を使う。
*/

/*
DirectX9におけるリソースプロパティ（すべてのリソースには以下のものが定義されている）
使用方法					：「テクスチャで使う」や「レンダリングターゲット」などの定義。「D3DUSAGE」で定義してある。
サーフェス・フォーマット	：「赤緑青各8ビット」などの指定。「D3DFORMAT列挙型」で定義してある。
メモリ・クラス				：リソースを置くメモリの管理方法。「D3DPOOL列挙型」で定義してある。
リソース型					：リソースを作った時に決定。「D3DRESOURCETYPE列挙型」で定義してある。

※リソースは「動的リソース」と「静的リソース」がある。
　ほとんどの「静的リソース」に対しては「D3DPOOL_MANAGED」を使うのがベスト。
　これによりデバイス処理をする必要がなくなる。
　「動的リソース」には「D3DPOOL_MANAGED」を指定すると大きくパフォーマンスに
　大きく影響するか、「D3DPOOL_MANAGED」指定自体が不可能になる。
*/

/*
メモリ・クラスでは以下の4種類が定義されている。
D3DPOOL------------>D3DPOOL_DEFAULT
			|		<∴>使用方法に最も適したメモリに置かれる。	
			|			使用した場合、デバイス消失時に必ず、「IDirect3DDevice9::Reset」メソッドを
			|			呼び出す前に解放して、デバイスが復元してから再度作り直す必要がある。
			|			これでテクスチャを作ると、動的テクスチャとFOURCCフォーマットの場合以外はロックされない。
			|
			|------>D3DPOOL_MANAGED
			|		<∴>リソースをDirect3Dで管理する。リソースはシステムメモリにバックアップされていて、
			|			リソースを使う必要が生じると、デバイスから使えるメモリへ自動的にコピーされる。
			|			この時直接変更されるのはシステムメモリ上のコピーで必要に応じて変更内容が
			|			デバイスメモリに転送される。また、デバイスが消失してもリソースを直す必要がない。
			|
			|------>D3DPOOL_SYSTEMMEM
			|		<∴>デバイスからアクセスできないシステムメモリに置かれる。このリソースはロックして内容を
			|			変更できる。また、「D3DPOOL_DEFAULT」タイプのリソース転送先として使うことができる。
			|			デバイスが消失してもリソースを直す必要がない。
			|
			|------>D3DPOOL_SCRATCH
					<∴>システムメモリに置かれる。デバイスによる制限を受けないが、デバイスからアクセスすることも
						転送・描画先として使うこともできない。常にロック可能で、デバイスが消失してもリソースを直す必要がない。
*/

/*
＜画面更新の仕組みについて＞
Direct3D9では、2D/3Dグラフィックスをバックバッファに描画して表示する。
パソコンに表示される内容はフロントバッファの内容。
そのためバックバッファを書き換えたら、フロントバッファにバックバッファの
内容を書き換える必要がある。
この更新処理には「フリップ」と「コピー」がある。
一般的にはフルスクリーンモードでフリップ処理が行われ、
ウィンドウモードでコピー処理が行われる。
*/

/*
＜directX9.0エラー処理関数＞

// エラーコードを示す文字列を返す
TCHAR *DXGetErrorDescription(HRESULT hr);

＜対応しているエラーコード＞
>>XACT,Direct3D10,D3DX10,Direct3D9,D3D9,Direct3D8,D3DX8
>>DirectDraw,DirectMusic,Directsound,DirectInput,DirectShow
>>Win32 Winerror.h	のエラーコードに対応している。


// エラーコードに関連付けられる名前を返す
TCHAR *DXGeterrorString(HRESULT hr);

＜対応しているエラーコード＞
>>対応するエラーコードは「DXGeterrorDescription」と同じ


// 渡されたエラーコードをそのまま返す
HRESULT DXTrace
(
	CHAR *strFile,	// ファイル名文字列ポインタ。「_FILE_」が使える。
	DWORD dwline,	// 行番号。「_LINE_」が使える。
	HRESULT hr,		// エラーコード。「DXGetString関数」が処理される。
	CHAR *strMsg	// オプションとして表示する文字列ポインタ。
	BOOL bPopMsgBox	// メッセージボックスを表示するかを指定する。TRUEで表示、FALSEで非表示。
);
*/

/*
＜DirectX9.0エラー処理マクロ＞

// エラー情報をデバッガに流す
HRESULT DXTRACE_ERR(char *str, HRESULT hr);
>>戻り値はマクロに渡したhrを返す

// メッセージボックスにエラー情報を表示
HRESULT DXTRACE_ERR_MSGBOX(char *str, HRESULT hr);
>>戻り値はマクロに渡したhrを返す

// 文字列をデバッガに流す
HRESULT DXTRACE_MSG(CHAR *str);
>>成功した場合は0以外、失敗した場合0を返す
*/

/*
＜戻り値の判定＞
多くのDirectXメソッドは処理が成功したかを「HRESULT型」で返す。
そのため「hr == S_OK」や「hr == E_FAL」で正しい判定はできない。
「HRESULT型」で判定を行う場合は、FAILEDマクロやSUCCEEDEDマクロを使う。
*/

/*
＜初期化処理＞
1.IDirect3D9インターフェースの取得
2.IDirect3DDevice9インターフェースの取得
3.ビューポートの設定

＜1.IDirect3D9インターフェースの取得＞
IDirect3D9インターフェースを取得するには、「Direct3Create9関数」を使う。
「Direct3DCreate9関数」の引数には常にD3D_SDK_VERSIONを指定する。
この関数はDirect3D9のポインタ型の「LPDIRECT3D9型」を返す。
取得に失敗した場合はNULLを返す。

＜2.IDirect3DDevice9インターフェースの取得＞
デバイスを作成するにはウィンドウハンドルが必要。
なので、デバイスの作成はCreateWindowを行った直後に行う。


*/